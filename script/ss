#!/bin/ash /etc/rc.common

START=95
SERVICE_USE_PID=1
SERVICE_WRITE_PID=1
SERVICE_DAEMONIZE=1

MPATH=`uci get monlor.tools.mpath`
. $MPATH/script/mecho

wan_mode=`ifconfig | grep pppoe-wan | wc -l`
if [ "$wan_mode" = '1' ];then
	wanip=$(ifconfig pppoe-wan | grep "inet addr:" | cut -d: -f2 | awk '{print$1}')
else
	wanip=$(ifconfig eth0.2 | grep "inet addr:" | cut -d: -f2 | awk '{print$1}')
fi
lanip=$(uci get network.lan.ipaddr)
redip=$lanip
CONFIG=$MPATH/conf/ss.conf
DNSCONF=$MPATH/conf/dns2socks.conf
SSGCONF=$MPATH/conf/ssg.conf
chnroute=$MPATH/conf/chnroute.conf
gfwlist=$MPATH/conf/gfwlist.conf
customize_black=$MPATH/conf/customize_black.conf
customize_white=$MPATH/conf/customize_white.conf
APPPATH=$MPATH/bin/ss-redir
SSGBIN=$MPATH/bin/ssg-redir
LOCALPATH=$MPATH/bin/ss-local
DNSPATH=$MPATH/bin/dns2socks
appname=ss

get_config() {
    
	MEO -bla1t "创建ss节点配置文件..."
	local_ip=0.0.0.0
	id=`uci get monlor.$appname.id`
	ss_name=`uci get monlor.$id.ss_name`
    	ss_server=`uci get monlor.$id.ss_server`
    	ss_server_port=`uci get monlor.$id.ss_server_port`
	ss_password=`uci get monlor.$id.ss_password`
	ss_method=`uci get monlor.$id.ss_method`
    
	echo -e '{\n  "server":"'$ss_server'",\n  "server_port":'$ss_server_port',\n  "local_port":'1081',\n  "local_address":"'$local_ip'",\n  "password":"'$ss_password'",\n  "timeout":600,\n  "method":"'$ss_method'"\n}' > $CONFIG
	cp $CONFIG $DNSCONF && sed -i 's/1081/1082/g' $DNSCONF
	
	if [ `uci get monlor.$appname.ssgena` == 1 ]; then
	
		ssgid=`uci get monlor.$appname.ssgid`
        	ssg_name=`uci get monlor.$ssgid.ss_name`
        	ssg_server=`uci get monlor.$ssgid.ss_server`
        	ssg_server_port=`uci get monlor.$ssgid.ss_server_port`
        	ssg_password=`uci get monlor.$ssgid.ss_password`
        	ssg_method=`uci get monlor.$ssgid.ss_method`
		echo -e '{\n  "server":"'$ssg_server'",\n  "server_port":'$ssg_server_port',\n  "local_port":'1085',\n  "local_address":"'$local_ip'",\n  "password":"'$ssg_password'",\n  "timeout":600,\n  "method":"'$ssg_method'"\n}' > $SSGCONF
	
	fi

}

dnsconfig() {

	insmod ipt_REDIRECT 2>/dev/null
	service_start $LOCALPATH -c $DNSCONF
	killall $DNSPATH > /dev/null 2>&1
	iptables -t nat -D PREROUTING -s $lanip/24 -p udp --dport 53 -j DNAT --to $redip > /dev/null 2>&1
    	MEO -bla1t "开启dns2socks进程..."
    	DNS_SERVER=$(uci get monlor.$appname.dns_server)
    	DNS_SERVER_PORT=$(uci get monlor.$appname.dns_port)
    	[ -z "DNS_SERVER" ] && (DNS_SERVER=8.8.8.8;uci set monlor.$appname.dns_server=8.8.8.8)
    	[ -z "DNS_SERVER_PORT" ] && (DNS_SERVER_PORT=53;uci set monlor.$appname.dns_port=53)
	uci commit monlor
    	service_start $DNSPATH 127.0.0.1:1082 $DNS_SERVER:$DNS_SERVER_PORT 127.0.0.1:15353 
    	if [ $? -ne 0 ];then
        	MEO -red1 "启动失败！"
        	exit
    	fi
    
}

get_mode_name() {
	case "$1" in
		0)
			echo "不走代理"
		;;
		1)
			echo "科学上网"
		;;
	esac
}

get_jump_mode(){
	case "$1" in
		0)
			echo "-j"
		;;
		*)
			echo "-g"
		;;
	esac
}

get_action_chain() {
	case "$1" in
		0)
			echo "RETURN"
		;;
		1)
			echo "SHADOWSOCK"
		;;
	esac
}

load_nat() {

	#?~H~[建CHAIN
        MEO -bla1t "加载iptables的nat规则..."
        iptables -t nat -N SHADOWSOCKS
        iptables -t nat -A SHADOWSOCKS -d 0.0.0.0/8 -j RETURN
        iptables -t nat -A SHADOWSOCKS -d $lanip/24 -j RETURN
        iptables -t nat -A SHADOWSOCKS -d $wanip/16 -j RETURN
        iptables -t nat -A SHADOWSOCKS -d $ss_server -j RETURN
        [ `uci get monlor.ss.ssgena` == 1 ] && iptables -t nat -A SHADOWSOCKS -d $ssg_server -j RETURN 

        iptables -t nat -N SHADOWSOCK

        #lan access control
	[ ! -f $MPATH/conf/sscontrol.conf ] && touch $MPATH/conf/sscontrol.conf
        cat $MPATH/conf/sscontrol.conf | awk -F ',' '{print $1}' | while read line
        do
        	mac=$line
		proxy_name=$(cat $MPATH/conf/sscontrol.conf | grep $line | awk -F ',' '{print $3}')
        	proxy_mode=$(cat $MPATH/conf/sscontrol.conf | grep $line | awk -F ',' '{print $4}')
		MEO -bla1t "加载ACL规则:[$proxy_name][$mac]模式为:$(get_mode_name $proxy_mode)"
        	iptables -t nat -A SHADOWSOCKS  -m mac --mac-source $mac $(get_jump_mode $proxy_mode) $(get_action_chain $proxy_mode)
        done

        #default alc mode
        ss_acl_default_mode=$(uci get monlor.ss.ss_acl_default_mode)
	[ -z "$ss_acl_default_mode" ] && ( ss_acl_default_mode=1;uci set monlor.ss.ss_acl_default_mode=1;uci commit monlor)
	MEO -bla1t "加载ACL规则:其余主机模式为:$(get_mode_name $ss_acl_default_mode)"
        iptables -t nat -A SHADOWSOCKS -p tcp -j $(get_action_chain $ss_acl_default_mode)
        
	[ ! -f $customize_black ] && touch $customize_black
	[ ! -f $customize_white ] && touch $customize_white

        cat $customize_black | while read line                                                                   
        do                                                                                              
        	echo "server=/.$line/127.0.0.1#15353" >> /etc/dnsmasq.d/customize_black.conf  
                echo "ipset=/.$line/customize_black" >> /etc/dnsmasq.d/customize_black.conf                     
        done
        cat $customize_white | while read line
        do
        	echo "ipset=/.$line/customize_white" >> /etc/dnsmasq.d/customize_white.conf
        done                                                                  
        ipset -N customize_black iphash -!  
        ipset -N customize_white iphash -!	

}

start() {

	[ ! -x $APPPATH ] && MEO -red1t "SS没有安装，输入ss enable安装！" && exit
	[ `uci show monlor | grep monlor.*.ss | grep -v monlor.ss | wc -l` -eq 0 ] && MEO -red1t "No ss server!" && exit 
	uci set monlor.$appname.enable=1
	uci commit monlor
	id=$(uci get monlor.$appname.id)
    	ss_mode=$(uci get monlor.$id.ss_mode)

	AreadyRunning=$(ps | grep -E 'ss-redir|ssg-redir' | grep -v grep | wc -l)
	if [ "$AreadyRunning" != '0'  ];then
		MEO -pur1t "SS已经在运行！"
		exit
	fi

    	get_config
    	
    	dnsconfig                                                                                                                            
    	                                                                                                                                             
	load_nat
    	
    	MEO -bla1t "启动ss进程($id)..."
    	case $ss_mode in
        "gfwlist")
            	service_start $APPPATH -b 0.0.0.0 -c $CONFIG   
            	if [ $? -ne 0 ]; then
                	MEO -red1t "启动失败！"
                	exit
            	fi
            	ss_gfwlist
            	;;
        "whitelist")
        	service_start $APPPATH -b 0.0.0.0 -c $CONFIG
        	if [ $? -ne 0 ]; then                                                                                                  
                        MEO -red1t "启动失败！"                       
                        exit                                
	        fi
	        ss_whitelist
	        ;;
        "wholemode")
            	service_start $APPPATH -b 0.0.0.0 -c $CONFIG 
            	if [ $? -ne 0 ]; then
                	MEO -red1t "启动失败！"
                	exit
            	fi
            	ss_wholemode
            	;;
    	"empty")
    		MEO -red1 "未启动ss进程！"
    	esac

	if [ `uci get monlor.$appname.ssgena` == 1 ]; then
		ssgid=`uci get monlor.$appname.ssgid`               
                ssg_mode=`uci get monlor.$ssgid.ssg_mode`
		MEO -bla1t "启动ss游戏进程($ssgid)..."
		case $ssg_mode in
		"cngame")
			service_start $SSGBIN -b 0.0.0.0 -u -c $SSGCONF
                	if [ $? -ne 0 ]; then
                       	 	MEO -red1t "启动失败！"
                        	exit
                	fi
                	ss_addudp	
                	ss_cngame	
			;;
		"frgame") 
			service_start $SSGBIN -b 0.0.0.0 -u -c $SSGCONF
			if [ $? -ne 0 ]; then
				MEO -red1t "启动失败"
				exit
			fi
			ss_addudp
			ss_frgame
			;;
		"empty")
			MEO -red1t "未启动ss游戏进程！"
		esac
	fi
	
  	iptablenu=$(iptables -t nat -L PREROUTING | awk '/KOOLPROXY/{print NR}')
	if [ ! -z "$iptablenu" ];then
		iptablenu=`expr $iptablenu - 2`
	else
		iptablenu=2
	fi
    	[ "$ss_mode" == "gfwlist" ] || [ "$ss_mode" == "wholemode" ] || [ "$ss_mode" == "whitelist" ] && iptables -t nat -I PREROUTING $iptablenu -p tcp -j SHADOWSOCKS
	
	/etc/init.d/dnsmasq restart

}


ss_gfwlist() {

    	MEO -bla1t "添加国外黑名单规则..."
    	cat $gfwlist $customize_black | while read line                                             
	do                                                                         
		echo "server=/.$line/127.0.0.1#15353" >> /etc/dnsmasq.d/gfwlist_ipset.conf
		echo "ipset=/.$line/gfwlist" >> /etc/dnsmasq.d/gfwlist_ipset.conf  
	done    
    	ipset -N gfwlist iphash -!
	iptables -t nat -A SHADOWSOCK -p tcp -m set --match-set gfwlist dst -j REDIRECT --to-port 1081
	iptables -t nat -A SHADOWSOCK -p tcp -m set ! --match-set customize_white dst -j REDIRECT --to-port 1081 

}

ss_whitelist() {

	MEO -bla1t "添加国外白名单规则..."                                    
	sed -e "s/^/-A nogfwnet &/g" -e "1 i\-N nogfwnet hash:net" $chnroute | ipset -R -!
	iptables -t nat -A SHADOWSOCK -p tcp -m set --match-set customize_black dst -j REDIRECT --to-ports 1081
	iptables -t nat -A SHADOWSOCK -p tcp -m set ! --match-set nogfwnet dst -j REDIRECT --to-ports 1081 
}

ss_addudp() {

	MEO -bla1t "添加iptables的udp规则..."
	#iptables -t nat -A PREROUTING -s $lanip/24 -p udp --dport 53 -j DNAT --to $lanip
        ip rule add fwmark 0x01/0x01 table 300
        ip route add local 0.0.0.0/0 dev lo table 300
        iptables -t mangle -N SHADOWSOCKS
        iptables -t mangle -A SHADOWSOCKS -d 0.0.0.0/8 -j RETURN
        iptables -t mangle -A SHADOWSOCKS -d 127.0.0.1/16 -j RETURN
        iptables -t mangle -A SHADOWSOCKS -d $lanip/16 -j RETURN
        iptables -t mangle -A SHADOWSOCKS -d $wanip/16 -j RETURN
        iptables -t mangle -A SHADOWSOCKS -d $ss_server -j RETURN
        [ `uci get monlor.ss.ssgena` == 1 ] && iptables -t mangle -A SHADOWSOCKS -d $ssg_server -j RETURN
	iptables -t mangle -A PREROUTING -p udp -j SHADOWSOCKS

	chmod -x /opt/filetunnel/stunserver > /dev/null 2>&1
	killall -9 stunserver > /dev/null 2>&1
}

ss_cngame() {

	MEO -bla1t "添加国内游戏iptables规则..."
	
	iptables -t mangle -A SHADOWSOCKS -p udp -m set ! --match-set customize_white dst -j TPROXY --on-port 1085 --tproxy-mark 0x01/0x01         

}

ss_frgame() {

	MEO -bla1t "添加国外游戏iptables规则..."

	[ $ss_mode != "whitelist" ] && sed -e "s/^/-A nogfwnet &/g" -e "1 i\-N nogfwnet hash:net" $chnroute | ipset -R -!
	iptables -t mangle -A SHADOWSOCKS -p udp -m set ! --match-set nogfwnet dst -j TPROXY --on-port 1085 --tproxy-mark 0x01/0x01

}

ss_wholemode() {

    	MEO -bla1t "添加全局模式iptables规则..."
    	iptables -t nat -A SHADOWSOCK -p tcp -j REDIRECT --to-ports 1081

}


stop() {
	
	[ ! -x $APPPATH ] && MEO -red1t "SS没有安装，输入ss enable安装！" && exit
	[ `uci show monlor | grep monlor.*.ss | grep -v monlor.ss | wc -l` -eq 0 ] && MEO -red1t "No ss server!" && exit
	uci set monlor.$appname.enable=0
	uci commit monlor
    	MEO -bla1t "关闭ss进程..."
    	killall ss-redir > /dev/null 2>&1
	killall ssg-redir > /dev/null 2>&1
	killall ss-local > /dev/null 2>&1
    	killall $DNSPATH > /dev/null 2>&1
    	#ps | grep dns2socks | grep -v grep | xargs kill -9 > /dev/null 2>&1
    	stop_ss_rules

}

stop_ss_rules() {

    	MEO -bla1t "清除iptables规则..."
    	cd /tmp
    	iptables -t nat -S | grep -E 'SHADOWSOCK|SHADOWSOCKS'| sed 's/-A/iptables -t nat -D/g'|sed 1,2d > clean.sh && chmod 777 clean.sh && ./clean.sh && rm clean.sh
    	ip rule del fwmark 0x01/0x01 table 300 &> /dev/null
	ip route del local 0.0.0.0/0 dev lo table 300 &> /dev/null
	iptables -t mangle -D PREROUTING -p udp -j SHADOWSOCKS &> /dev/null
	iptables -t nat -D PREROUTING -p tcp -j SHADOWSOCKS &> /dev/null
	iptables -t mangle -F SHADOWSOCKS &> /dev/null
	iptables -t mangle -X SHADOWSOCKS &> /dev/null
	iptables -t mangle -F SHADOWSOCK &> /dev/null
	iptables -t mangle -X SHADOWSOCK &> /dev/null
	iptables -t nat -F SHADOWSOCK &> /dev/null
	iptables -t nat -X SHADOWSOCK &> /dev/null
	iptables -t nat -F SHADOWSOCKS &> /dev/null
	iptables -t nat -X SHADOWSOCKS &> /dev/null
	ipset destroy nogfwnet &> /dev/null
	ipset destroy gfwlist &> /dev/null
	ipset destroy customize_black &> /dev/null
	ipset destroy customize_white &> /dev/null
    	iptables -t nat -D PREROUTING -s $lanip/24 -p udp --dport 53 -j DNAT --to $redip > /dev/null 2>&1
    	chmod +x /opt/filetunnel/stunserver > /dev/null 2>&1
	rm -rf $CONFIG
	rm -rf $DNSCONF
	rm -rf $SSGCONF
	rm -rf /etc/dnsmasq.d/gfwlist_ipset.conf > /dev/null 2>&1
	rm -rf /etc/dnsmasq.d/customize_*.conf > /dev/null 2>&1
	/etc/init.d/dnsmasq restart
}


status() {

        MEO -bla1t "Checking $appname ... \c"
        status=`ps | grep -E "ss-redir|ssr-redir" | grep -v 'grep'  | grep -v script | grep -v '{' | wc -l`
	if [ "$status" == "1" ];then #进程存在，已运行
        	echo "running"
       		MEO -bla1t "Checking google ... \c"
		id=$(uci get monlor.$appname.id)
		DNS_PORT=1082
		http_status=`curl  -s -w %{http_code} https://www.google.com.hk/images/branding/googlelogo/1x/googlelogo_color_116x41dp.png -k -o /dev/null --socks5 127.0.0.1:1082`
		if [ "$http_status" == "200" ];then
			echo "ok"   #翻墙正常
		else
			MEO -red1 "Failed!" 
		fi
	else
		echo "stopped"
	fi

}

restart() 
{
	stop
	uci set monlor.$appname.version=`$APPPATH -h | awk '/shadowsocks-libev/{print$2}'`
	
	if [ "$1" ]; then                                                    
		$MPATH/script/ssconf show | grep ss_name | grep -w $1 > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			uci set monlor.$appname.id=$1   
			uci set monlor.$appname.ssgid=" "
		else
			MEO -red1t "服务器名输入错误..."
			exit
		fi
	else
		MIN=200
		uci export monlor | grep ss_name | cut -d"'" -f2 | while read line
		do
			ss_ping=`uci get monlor.$line.ss_ping | cut -d. -f1`
			[ "uci get monlor.$line.ss_ping" == "bad" ] && continue
			[ `uci get monlor.$line.ssg_mode` == "cngame" ] && continue
			[ $ss_ping -lt $MIN ] && MIN="$ss_ping" && echo $line > /tmp/min_ss
		done
		ssid=`cat /tmp/min_ss`
		rm -rf /tmp/min_ss
		uci set monlor.$appname.id=$ssid
		if [ `uci get monlor.$appname.ssgena` -eq 1 ]; then
			ssgid=`uci get monlor.$appname.ssgid`
			[ `uci get monlor.$ssgid.ssg_mode` == "frgame" ] && uci set monlor.$appname.ssgid=$ssid
		fi
			
		
	fi
	if [ "$2" ]; then
		$MPATH/script/ssconf show | grep ss_name | grep -w $2 > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			uci set monlor.$appname.ssgid=$2
			uci set monlor.$appname.ssgena=1
		else
			MEO -red1t "服务器名输入错误..."
			exit
		fi
	elif [ "$1" ]; then
		uci set monlor.$appname.ssgena=0
	fi
	sleep 1
	start

}

enable() {

	$MPATH/script/update $appname

}

disable() {

	uci set monlor.$appname.enable=0
	uci commit monlor
	stop
	MEO -bla1t "删除$appname文件..."
	rm -rf $APPPATH $SSGBIN $DNSPATH $gfwlist $chnroute $MPATH/script/ss*
	uci show monlor | grep "monlor.*.ss" | grep -v "monlor.ss" | sed -e 's/^/uci del /g' > /tmp/ss_backup
	chmod +x /tmp/ss_backup && /tmp/ss_backup

}


